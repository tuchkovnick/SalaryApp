Схема решения:

"Библиотека классов (бизнес-модель) <-> приложение SalaryApp <-> БД Sqlite


1. Библиотека классов реализована за счёт принипа наследования ООП и включает в себя классы Employee -> Manager -> Salesman с необходимым функционалом
2. Приложение SalaryApp. Паттерн MVVM.
	View: отображение на форме: контролы и тд.
	ViewModel: связь View и Модели
	Моdel: основной функционал приложения, а именно:
		- считывание полей БД (через EntityFramework), их наложение на библиотеку (конвертация в бизнес-модель)
		- удаление сотрудников
		- добавление сотрудников (не реализовано)
		- отображение необходимой информации (зп, подчиненные)
		- проверка пароля доступа (пароль = имя пользователя или Admin)		
		- получение информации о пароле администратора			
3. БД имеет 2 таблицы. 
		- CompanyEmployees
		- CompanyRelations вида "id начальника -> id подчиненного"

Можно было бы изменить в архитектуре:
-добавить поле "дата рождения" в БД, для более точной идентификации сотрудника
-обойтись без конвертации классов в бизнес-модель или вынести весь промежуточный слой БД <-> приложение в отдельную бибиотеку
-вынести функцонал классов из папки Functionality providers в отдельную библиотеку для гибкости, хотя и в таком варианте никто не исключает возможности использования стороннего функционала, для проверки хеша пароля по алгоритму MD5 вместо SHA256 или, например, ввода пароля по сети.

P.S: 
позднее пришла мысль, что добавить щепотку асинхронности при работе с БД (в классе Model) было бы очень неплохой идеей
